//Two Sum in BST

class TreeNode {
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;

    }
}

class BinaryTree {
    constructor(){
        this.root = null;
    }
    
    insert(value){
        const newNode = new TreeNode(value);
        if(this.root==null){
            this.root = newNode
        }
        else{
            this.insertNode(this.root, newNode)
        }
    }
    
    insertNode(node, newNode){
        if(node.value>newNode.value){
            if(node.left==null){
                node.left=newNode
            }
            else{
                this.insertNode(node.left, newNode)
            }
        }
        else{
           if(node.right==null){
                node.right=newNode
            }
            else{
                this.insertNode(node.right, newNode)
            }
        }
    }
   
    
    inorder(node=this.root, sortedArray=[]){
        if(node!=null){
            this.inorder(node.left, sortedArray);
            sortedArray.push(node.value);
            this.inorder(node.right, sortedArray)
        }
        return sortedArray;
    }
    
    twoSum(target){
        var sortedArray = this.inorder();
        var left = 0;
        var right = sortedArray.length-1;
        while(left<right){
            var sum = sortedArray[left]+sortedArray[right]
            if(sum==target){
                return [sortedArray[left], sortedArray[right]]
            }
            else if(sum<target){
                left++
            }else{
                right--
            }
        }
    }
    
}

const tree = new BinaryTree();
tree.insert(6);
tree.insert(2);
tree.insert(9);
tree.insert(1);
tree.insert(5);
tree.insert(8);
tree.insert(4);
tree.insert(7);
console.log(tree.twoSum(7))

console.log(tree.inorder())

//sort linked list

class Node{
    constructor(data){
        this.value = data;
        this.next = null;
    }
}

class LinkedList{
    constructor(){
        this.head=null;
    }
    
    append(data){
        var newNode = new Node(data);
        if(this.head==null){
        this.head=newNode;
        }
        else{
        var current = this.head;
        while(current.next!=null){
            current = current.next;
        }
        current.next=newNode;
        }
    }
    
    print(){
        var current = this.head;
        var list=""
        while(current!=null){
            list = list + current.value + "->";
            current = current.next;
        }
        console.log(list+"null")
    }
    
    fromHead(head){
        this.head = head;
        return this;
    }
    
    arrange(){
        var arr = [];
        var current = this.head;
        while(current!=null){
            arr.push(current.value);
            current = current.next;
        }  
    
        var result =[];
        function increase(arr){
        var pivot = arr[0];
        var left = [];
        var right = [];
     
        if(arr.length<=1){
            return arr;
        }
        var i=1;
        while(i<arr.length){
            if(arr[i]<pivot)
                left.push(arr[i])
            else
                right.push(arr[i])
            i++;
        }

        return [...increase(left), pivot, ...increase(right)]
        }
        result = increase(arr);
     
        var head = new Node(result[0]);
        var current = head;
        for(var i=1; i<result.length; i++){
            var node = new Node(result[i]);
            current.next = node;
            current = current.next;
        }
        this.fromHead(head);
        this.print()
    }
}

const list = new LinkedList();
list.append(5);
list.append(4);
list.append(8);
list.append(1);
list.print();
list.arrange()

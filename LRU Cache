//LRU Cache

class Node{
    constructor(key, value){
        this.key = key;
        this.value =  value;
        this.next = null;
        this.prev = null;
    }
}
class LRUCache{
    constructor(capacity){
        this.capacity = capacity;
        this.cache = new Map()
        this.head = new Node(null, null);
        this.tail = new Node(null, null);
        this.head.next = this.tail;
        this.tail.prev = this.head;
    }
    get(key){
        if(!this.cache.has(key)){
            return -1
        }
        var node = this.cache.get(key);
        this.removeNode(node);
        this.addNode(node);
        return node.value;
    }
    
    add(key, value){
        if(this.cache.has(key)){
            this.removeNode(this.cache.get(key))
        }
        var newNode = new Node(key, value);
        this.addNode(newNode);
        this.cache.set(key, newNode);
        
        if(this.cache.size>this.capacity){
            var LRU = this.tail.prev;
            this.removeNode(LRU);
            this.cache.delete(LRU.key)
          
        }
    }
    
    addNode(node){
    var nextofhead = this.head.next;
    this.head.next = node;
    node.prev = this.head;
    node.next = nextofhead;
    nextofhead.prev = node;
    }
    
    removeNode(node){
        var next = node.next;
        var prev = node.prev;
        prev.next = next;
        next.prev = prev;
    }
}

const cache = new LRUCache(5);
cache.add(1,'Keerti');
cache.add(2,'Raj');
cache.add(3,'Priya');
cache.add(4,'Harsh');
cache.add(5, 'Sani');
cache.add(1,'jolly');
cache.get(3)

console.log(cache.head)

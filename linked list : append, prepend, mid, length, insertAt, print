//linked list 

class Node{
    constructor(data){
        this.value = data;
        this.next = null;
    }
}

class linkedList{
    constructor(){
        this.head = null;
        this.size = 0;
    }
    append(data){
        const newNode = new Node(data)
         if(this.size==0){
            this.head=newNode;
        }
        else{
          var current = this.head;
          while(current.next!=null){
              current=current.next;
          }
          current.next=newNode;
        }
        this.size++;
    }
    prepend(data){
        const newNode = new Node(data)
        if(this.size==0){
            this.head=newNode;
        }
        else{
          newNode.next=this.head;
          this.head=newNode;
        }
        this.size++;
    }
    insertAt(data,num){
        const newNode = new Node(data)
        var current = this.head;
        var index=0;
        while(index<num-1){
            current = current.next;
            index++;
        }
        newNode.next = current.next;
        current.next = newNode;
        this.size++;
    }
    length(){
        console.log("size of this linked list is  " + this.size)
    }
    mid(){
        var slow=this.head;
        var fast=this.head;
        var prev = null;
        while(fast!=null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        if(fast!=null){
        console.log("middle of this linked list is, " , slow.value)
        }
        else{
             console.log("middle of this linked list are, " , slow.value, slow.next.value)
        }
    }
    print(){
        var current = this.head;
        var list = "";
       while(current!=null){
           list += current.value + "->";
           current = current.next;
       }
       console.log(list+"null")
    }
}

var list = new linkedList();
list.append(5);
list.append(4);
list.prepend(6);
list.append(5);
list.append(4);
list.append(8);
list.prepend(0);
list.insertAt(1,1);
list.insertAt(2,2);
list.insertAt(3,3)
list.print();
list.length();
list.mid()



//binary tree

class TreeNode {
    constructor(value){
        this.value = value;
        this.left = null;
        this.right = null;
    }
}

class BinaryTree {
    constructor(){
        this.root = null;
    }
    
    insert(value){
        const newNode = new TreeNode(value)
        if(this.root==null){
            this.root=newNode;
        }
        else{
            this.insertNode(this.root, newNode)
        }
    }
    insertNode(node, newNode){
        if(node.value>newNode.value){
            if(node.left==null){
                node.left=newNode
            }
            else{
                this.insertNode(node.left, newNode)
            }
        }
        else{
            if(node.right==null){
                node.right=newNode
            }
            else{
                this.insertNode(node.right, newNode)
            }
        }
    }
    preorder(node=this.root){
        if(node!=null){
        console.log(node.value);
        this.preorder(node.left);
        this.preorder(node.right);
        }
    }
    inorder(node=this.root){
      if(node!=null){
          this.inorder(node.left);
          console.log(node.value);
          this.inorder(node.right)
      }        
    }
    postorder(node=this.root){
        if(node!=null){
            this.postorder(node.left);
            this.postorder(node.right);
            console.log(node.value)
        }
    }
    invertTree(node=this.root){
        if(node==null){
            return null;
        }
        const left = this.invertTree(node.left);
        const right = this.invertTree(node.right);
        node.left = right;
        node.right = left
        
        return node;
    }
}

const tree = new BinaryTree()
tree.insert(5);
tree.insert(2);
tree.insert(3);
tree.insert(10);
tree.insert(1);
tree.insert(2);
tree.preorder();
tree.invertTree();
tree.preorder()
